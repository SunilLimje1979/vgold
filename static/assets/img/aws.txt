Liks
https://www.youtube.com/watch?v=LaoYcQsPyD8
https://www.digitalocean.com/community/tutorials/how-to-set-up-django-with-postgres-nginx-and-gunicorn-on-ubuntu-20-04
https://thepardeephere.medium.com/deploy-multiple-django-applications-with-gunicorn-and-nginx-773312d16f02
https://medium.com/ruralscript/install-and-setuppostgresql-on-ubuntu-amazon-ec2-5d1af79b4fca
https://medium.com/@pantaanish/setting-up-postgresql-on-an-ec2-instance-a-step-by-step-guide-9be2e3348fdb
https://medium.com/@chodvadiyasaurabh/deploying-a-python-django-project-on-aws-step-by-step-guide-with-commands-84ca8a4f9d6f
https://medium.com/@karimmirzaguliyev/mastering-django-whitenoise-a-deep-dive-into-efficient-static-file-management-fa2aa5f669e6
https://docs.djangoproject.com/en/5.0/howto/static-files/
################## python 3.12.1
# Update package list
sudo apt update

# Install required dependencies
sudo apt install -y build-essential zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev libssl-dev libreadline-dev libffi-dev libsqlite3-dev wget libbz2-dev

# Download Python source code
wget https://www.python.org/ftp/python/3.12.1/Python-3.12.1.tgz

# Extract the tarball
tar -xf Python-3.12.1.tgz

# Navigate into the extracted directory
cd Python-3.12.1

# Configure and compile Python
./configure --enable-optimizations
make -j 4  # Adjust the number based on the available CPU cores
sudo make altinstall

$ sudo rm -rf Python-3.12.1
$ sudo rm -rf Python-3.12.1.tgz 

######

# Navigate back to the home directory
cd ~

# Remove the Python source code directory
rm -r Python-3.12.1

# Remove the downloaded tarball
rm Python-3.12.1.tgz

###############
# Create a virtual environment
python3.12 -m venv env

# Activate the virtual environment
source env/bin/activate

pip install psycopg
pip install psycopg-binary

sudo apt update
sudo apt install nginx
sudo apt install gunicorn	

###########



###############  postgres

 $ sudo apt-get update
 $ sudo apt-get install postgresql postgresql-contrib

$ sudo -i -u postgres

$ psql


postgres=# \password
Enter new password:
Enter it again:
postgres=#

$sudo vim /etc/postgresql/14/main/postgresql.conf

listen_addresses = '*' 

$sudo vim /etc/postgresql/14/main/pg_hba.conf

host     all     all     0.0.0.0/0     md5




###############

[Unit]
Description=gunicorn daemon
Requires=appointment.socket
After=network.target

[Service]
User=ubuntu
Group=nginx
WorkingDirectory=/home/ubuntu/appointment
ExecStart=/home/ubuntu/appointment/env/bin/gunicorn \
  --access-logfile - \
  --workers 3 \
  --bind unix:/run/appointment.sock \
  core.wsgi:application

[Install]
WantedBy=multi-user.target


###############
sudo systemctl daemon-reload
sudo systemctl restart appointment.service
###############

$ sudo systemctl start appointment.socket
$ sudo systemctl start appointment.service
$ sudo systemctl enable appointment.socket
$ sudo systemctl enable appointment.service
# To check Status
$ sudo systemctl status appointment
$ sudo systemctl restart nginx

#################
getent group
sudo addgroup nginx
sudo systemctl daemon-reload

##################

server {
    listen 8000;
    server_name 13.233.211.102;

    location = /favicon.ico {
        access_log off;
        log_not_found off;
    }

    location / {
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_pass http://unix:/run/appointment.sock;
    }
}


###########
sudo vim /etc/systemd/system/appointment.socket
sudo vim /etc/systemd/system/appointment.service
sudo vim /etc/nginx/nginx.conf
sudo systemctl restart nginx
########### temp

server {
    listen 8000;  # Adjust the port number if needed
    server_name 13.233.211.102;  # Replace with your server's IP address or domain

    location = /favicon.ico {
        access_log off;
        log_not_found off;
    }

    location /staticfiles/ {
        alias /home/etc/appointment/staticfiles/;
    }

    location / {
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_pass http://unix:/run/appointment.sock;
    }
}


############################################## add this in setting#########################
import os
at the end of file
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATIC_URL = '/static/'

python manage.py collectstatic
###########################################################################################################

ALLOWED_HOSTS = ["*","localhost","localhost:5432","0.0.0.0:8000","13.233.211.102","13.233.211.102:8000"]



DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'db_gyaagl_vocabuli_medicify',
        'USER': 'postgres',
        'PASSWORD': 'Medicify@2024',
        'HOST': '13.233.211.102',
        'PORT': '5432',
    }
}

#########################################################################################
1. appointment  done
2. doctor        
3. masters
4. medicalrecord
5. medicify-project
6. pateint


if settings.DEBUG:
    urlpatterns += static('/appointment/static/', document_root=settings.STATIC_ROOT)



STATIC_URL = '/doctor/static/'
STATICFILES_DIRS = [
    BASE_DIR / "doctor/static",
]
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

##################

python3.12 -m venv env
pip install ./medicify-project-0.1.tar.gz


################# socket      sudo vim /etc/systemd/system/medicify-project.socket
[Unit]
 Description=medicify-project socket
[Socket]
 ListenStream=/run/medicify-project.sock
[Install]
 WantedBy=sockets.target

################# service     sudo vim /etc/systemd/system/medicify-project.service

[Unit]
Description=gunicorn daemon
Requires=medicify-project.socket
After=network.target

[Service]
User=ubuntu
Group=nginx
WorkingDirectory=/home/ubuntu/medicify-project
ExecStart=/home/ubuntu/medicify-project/env/bin/gunicorn \
  --access-logfile - \
  --workers 3 \
  --bind unix:/run/medicify-project.sock \
  medicify_model.wsgi:application

[Install]
WantedBy=multi-user.target

####################
sudo vim /etc/nginx/nginx.conf

$ sudo systemctl start medicify-project.socket
$ sudo systemctl start medicify-project.service
$ sudo systemctl enable medicify-project.socket
$ sudo systemctl enable medicify-project.service
# To check Status
$ sudo systemctl status medicify-project
$ sudo systemctl restart nginx

sudo vim /etc/nginx/nginx.conf
sudo systemctl restart nginx
sudo systemctl restart medicify-project.socket
sudo systemctl restart medicify-project.service


##############################################nikhil
git clone https://github.com/SunilLimje1979/medicify-project.git
cd medicify-project/
python3.12 -m venv env
ls
source env/bin/activate
pip install django
pip install django-rest-framework
pip install ./medicify-project-0.1.tar.gz
pip install gunicorn
pip install psycopg
pip install psycopg-binary
pip install psycopg2-binary
pip install gunicorn
sudo apt install nginx
ls
python manage.py runserver
python manage.py makemigrations
python manage.py migrate
python manage.py runserver
sudo vim /etc/systemd/system/pateint.socket
	==>press i to edit
[Unit]
 Description=pateint socket
[Socket]
 ListenStream=/run/pateint.sock
[Install]
 WantedBy=sockets.target

      ==>esc+shift press+:
	:wq
	enter key


sudo vim /etc/systemd/system/pateint.service
	==>press i to edit
[Unit]
Description=gunicorn daemon
Requires=pateint.socket
After=network.target

[Service]
User=ubuntu
Group=nginx
WorkingDirectory=/home/ubuntu/pateint
ExecStart=/home/ubuntu/pateint/env/bin/gunicorn \
  --access-logfile - \
  --workers 3 \
  --bind unix:/run/pateint.sock \
  pateint.wsgi:application

[Install]
WantedBy=multi-user.target

==>==>esc+shift press+:
	:wq
	enter key


sudo vim /etc/nginx/nginx.conf

===> i
 location = /pateint/favicon.ico {
        access_log off;
        log_not_found off;
    }

    location /pateint/staticfiles/ {
        root /home/ubuntu/pateint;
    }

    location /pateint/ {
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_pass http://unix:/run/pateint.sock;
    }

========>==>esc+shift press+:
	:wq
	enter key

sudo systemctl start doctor.socket
sudo systemctl start doctor.service
sudo systemctl start doctor.socket
sudo systemctl enable doctor.socket

sudo systemctl start pateint.service
sudo systemctl enable pateint.service

sudo systemctl status pateint
sudo systemctl restart masters.socket
sudo systemctl restart masters.service
sudo systemctl restart nginx

########################################################
appointment
masters
pateint not done
doctor
medicalrecord

restart each time
sudo systemctl restart doctor.socket
sudo systemctl restart doctor.service

######################################################
if python version error has come
python version --python3.12
sudo apt update
sudo apt install python3.12
sudo apt install python3.12-distutils  # For some Python versions, distutils is a separate package
wget https://bootstrap.pypa.io/get-pip.py
sudo python3.12 get-pip.py